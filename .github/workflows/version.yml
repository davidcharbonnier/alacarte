name: Version Packages

on:
  push:
    branches:
      - master

jobs:
  version:
    # Only run if NOT a release commit
    if: "!startsWith(github.event.head_commit.message, 'chore: release')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci

      - name: Detect code changes (exclude docs)
        id: has_changes
        run: |
          echo "Checking for code changes in apps/ (excluding documentation)..."
          
          # Get changed files between HEAD~1 and HEAD
          CHANGED_FILES=$(git diff HEAD~1 HEAD --name-only)
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo ""
          
          # Filter for apps code changes (exclude docs, README, and .md files except CHANGELOG)
          CODE_CHANGES=$(echo "$CHANGED_FILES" | \
            grep -E '^apps/(api|client|admin)/' | \
            grep -v -E '^apps/[^/]+/docs/' | \
            grep -v -E '^apps/[^/]+/README\.md$' | \
            { grep -v -E '\.md$' || true; } | \
            grep -E '.' || \
            echo "$CHANGED_FILES" | grep -E 'apps/[^/]+/CHANGELOG\.md' || true)
          
          if [ -z "$CODE_CHANGES" ]; then
            echo "has_code_changes=false" >> $GITHUB_OUTPUT
            echo "‚ùå No code changes detected (only documentation or non-code files)"
          else
            echo "has_code_changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Code changes detected:"
            echo "$CODE_CHANGES"
          fi

      - name: Check for changesets
        id: check_changesets
        if: steps.has_changes.outputs.has_code_changes == 'true'
        run: |
          # Check if any changesets exist (excluding README.md)
          CHANGESETS=$(find .changeset -name "*.md" ! -name "README.md" 2>/dev/null || true)
          
          if [ -z "$CHANGESETS" ]; then
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changesets found - skipping versioning"
          else
            echo "has_changesets=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changesets found:"
            echo "$CHANGESETS"
          fi

      - name: Run changesets version
        if: steps.has_changes.outputs.has_code_changes == 'true' && steps.check_changesets.outputs.has_changesets == 'true'
        run: |
          echo "Running changesets version..."
          npm run version
          echo "‚úÖ Changesets version completed"

      - name: Get new version and commit
        if: steps.has_changes.outputs.has_code_changes == 'true' && steps.check_changesets.outputs.has_changesets == 'true'
        run: |
          # Check if there are changes to commit
          if [ -z "$(git status --porcelain)" ]; then
            echo "‚ÑπÔ∏è No changes to commit - versions already up to date"
            exit 0
          fi
          
          # Get the new version (all apps have same version due to linked config)
          NEW_VERSION=$(node -p "require('./apps/api/package.json').version")
          
          echo "üöÄ New version: v${NEW_VERSION}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all changes
          git add .
          
          # Commit with version
          git commit -m "chore: release v${NEW_VERSION}"
          
          # Push to master
          git push origin master
          
          echo "‚úÖ Committed and pushed version v${NEW_VERSION}"
