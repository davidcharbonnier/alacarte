name: PR Snapshot Build

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      client: ${{ steps.changes.outputs.client }}
      admin: ${{ steps.changes.outputs.admin }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed apps
        id: changes
        run: |
          # Get list of changed files
          git fetch origin ${{ github.event.pull_request.base.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo ""
          
          # Check if API changed (excluding markdown)
          if echo "$CHANGED_FILES" | grep '^apps/api/' | grep -v '\.md$' > /dev/null; then
            echo "api=true" >> $GITHUB_OUTPUT
            echo "✅ API has changes"
          else
            echo "api=false" >> $GITHUB_OUTPUT
            echo "❌ API has no changes"
          fi
          
          # Check if Client changed (excluding markdown)
          if echo "$CHANGED_FILES" | grep '^apps/client/' | grep -v '\.md$' > /dev/null; then
            echo "client=true" >> $GITHUB_OUTPUT
            echo "✅ Client has changes"
          else
            echo "client=false" >> $GITHUB_OUTPUT
            echo "❌ Client has no changes"
          fi
          
          # Check if Admin changed (excluding markdown)
          if echo "$CHANGED_FILES" | grep '^apps/admin/' | grep -v '\.md$' > /dev/null; then
            echo "admin=true" >> $GITHUB_OUTPUT
            echo "✅ Admin has changes"
          else
            echo "admin=false" >> $GITHUB_OUTPUT
            echo "❌ Admin has no changes"
          fi

  generate-version:
    needs: detect-changes
    # Only run if at least one app changed
    if: |
      needs.detect-changes.outputs.api == 'true' ||
      needs.detect-changes.outputs.client == 'true' ||
      needs.detect-changes.outputs.admin == 'true'
    runs-on: ubuntu-latest
    outputs:
      snapshot_version: ${{ steps.version.outputs.snapshot }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate snapshot version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          SNAPSHOT="${VERSION}-pr-${{ github.event.pull_request.number }}.${GITHUB_SHA:0:7}"
          echo "snapshot=${SNAPSHOT}" >> $GITHUB_OUTPUT
          echo "Generated version: ${SNAPSHOT}"

  build-api:
    needs: [detect-changes, generate-version]
    if: needs.detect-changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${{ needs.generate-version.outputs.snapshot_version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:pr-${{ github.event.pull_request.number }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-client:
    needs: [detect-changes, generate-version]
    if: needs.detect-changes.outputs.client == 'true'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file
        working-directory: ./apps/client
        run: |
          cat << EOF > .env
          API_BASE_URL=${{ vars.CLIENT_API_BASE_URL }}
          GOOGLE_CLIENT_ID=${{ vars.CLIENT_GOOGLE_CLIENT_ID }}
          APP_VERSION=${{ needs.generate-version.outputs.snapshot_version }}
          EOF
          echo "✅ Created .env file for development build"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.4"
          channel: "stable"

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      - name: Install dependencies
        working-directory: ./apps/client
        run: flutter pub get

      - name: Generate localizations
        working-directory: ./apps/client
        run: flutter gen-l10n

      - name: Build APK
        working-directory: ./apps/client
        run: flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: alacarte-client-${{ needs.generate-version.outputs.snapshot_version }}
          path: apps/client/build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 30

  build-admin:
    needs: [detect-changes, generate-version]
    if: needs.detect-changes.outputs.admin == 'true'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Admin
        uses: docker/build-push-action@v5
        with:
          context: ./apps/admin
          file: ./apps/admin/Dockerfile
          push: true
          target: prod
          build-args: |
            NEXT_PUBLIC_API_URL=${{ vars.ADMIN_NEXT_PUBLIC_API_URL }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${{ needs.generate-version.outputs.snapshot_version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:pr-${{ github.event.pull_request.number }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  comment-pr:
    needs: [detect-changes, generate-version, build-api, build-client, build-admin]
    # Only comment if at least one build succeeded
    if: |
      always() &&
      needs.generate-version.result == 'success' &&
      (needs.build-api.result == 'success' ||
       needs.build-client.result == 'success' ||
       needs.build-admin.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.generate-version.outputs.snapshot_version }}';
            const prNumber = ${{ github.event.pull_request.number }};
            const sha = '${{ github.sha }}'.substring(0, 7);

            let comment = `## 📦 Snapshot Build Available\n\n`;
            comment += `**Version:** \`${version}\`\n`;
            comment += `**Commit:** ${sha}\n\n`;
            comment += `### Published Images\n\n`;

            if ('${{ needs.build-api.result }}' === 'success') {
              comment += `✅ **API:** \`${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${version}\`\n`;
              comment += `   - Convenience: \`${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:pr-${prNumber}-latest\`\n\n`;
            }

            if ('${{ needs.build-client.result }}' === 'success') {
              comment += `✅ **Client APK:** [Download from artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
            }

            if ('${{ needs.build-admin.result }}' === 'success') {
              comment += `✅ **Admin:** \`${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${version}\`\n`;
              comment += `   - Convenience: \`${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:pr-${prNumber}-latest\`\n\n`;
            }

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
