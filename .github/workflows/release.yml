name: Build and Release

on:
  push:
    tags:
      - 'api-v*'
      - 'client-v*'
      - 'admin-v*'
      - 'v*'

jobs:
  determine-releases:
    runs-on: ubuntu-latest
    outputs:
      build_api: ${{ steps.check.outputs.build_api }}
      build_client: ${{ steps.check.outputs.build_client }}
      build_admin: ${{ steps.check.outputs.build_admin }}
      api_version: ${{ steps.versions.outputs.api_version }}
      client_version: ${{ steps.versions.outputs.client_version }}
      admin_version: ${{ steps.versions.outputs.admin_version }}
      release_type: ${{ steps.check.outputs.release_type }}
      tag_name: ${{ steps.check.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine what to build from tag
        id: check
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          echo "Tag: $TAG"
          
          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Synchronized release (v1.2.3)
            echo "build_api=true" >> $GITHUB_OUTPUT
            echo "build_client=true" >> $GITHUB_OUTPUT
            echo "build_admin=true" >> $GITHUB_OUTPUT
            echo "release_type=synced" >> $GITHUB_OUTPUT
            echo "✅ Synced release detected"
          elif [[ "$TAG" =~ ^api-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # API only
            echo "build_api=true" >> $GITHUB_OUTPUT
            echo "build_client=false" >> $GITHUB_OUTPUT
            echo "build_admin=false" >> $GITHUB_OUTPUT
            echo "release_type=api" >> $GITHUB_OUTPUT
            echo "✅ API release detected"
          elif [[ "$TAG" =~ ^client-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Client only
            echo "build_api=false" >> $GITHUB_OUTPUT
            echo "build_client=true" >> $GITHUB_OUTPUT
            echo "build_admin=false" >> $GITHUB_OUTPUT
            echo "release_type=client" >> $GITHUB_OUTPUT
            echo "✅ Client release detected"
          elif [[ "$TAG" =~ ^admin-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Admin only
            echo "build_api=false" >> $GITHUB_OUTPUT
            echo "build_client=false" >> $GITHUB_OUTPUT
            echo "build_admin=true" >> $GITHUB_OUTPUT
            echo "release_type=admin" >> $GITHUB_OUTPUT
            echo "✅ Admin release detected"
          fi

      - name: Get versions from tag
        id: versions
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          
          # Extract version from tag (remove 'v' prefix and any app prefix)
          # Examples: v0.6.0 -> 0.6.0, api-v1.2.3 -> 1.2.3
          VERSION=$(echo "$TAG" | sed -E 's/^(api-|client-|admin-)?v//')
          
          echo "api_version=$VERSION" >> $GITHUB_OUTPUT
          echo "client_version=$VERSION" >> $GITHUB_OUTPUT
          echo "admin_version=$VERSION" >> $GITHUB_OUTPUT
          
          echo "📦 Versions from tag $TAG: $VERSION"

  build-api:
    needs: determine-releases
    if: needs.determine-releases.outputs.build_api == 'true'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${{ needs.determine-releases.outputs.api_version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-client:
    needs: determine-releases
    if: needs.determine-releases.outputs.build_client == 'true'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env file
        working-directory: ./apps/client
        run: |
          cat << EOF > .env
          API_BASE_URL=${{ vars.CLIENT_API_BASE_URL }}
          GOOGLE_CLIENT_ID=${{ vars.CLIENT_GOOGLE_CLIENT_ID }}
          APP_VERSION=${{ needs.determine-releases.outputs.client_version }}
          EOF

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.4"
          channel: "stable"

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      - name: Setup Android Keystore
        working-directory: ./apps/client
        run: |
          echo "${{ secrets.CLIENT_KEYSTORE_BASE64 }}" | base64 -d > android/app/release-keystore.jks
          cat << EOF > android/key.properties
          storePassword=${{ secrets.CLIENT_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.CLIENT_KEY_PASSWORD }}
          keyAlias=${{ secrets.CLIENT_KEY_ALIAS }}
          storeFile=release-keystore.jks
          EOF

      - name: Install dependencies
        working-directory: ./apps/client
        run: flutter pub get

      - name: Generate localizations
        working-directory: ./apps/client
        run: flutter gen-l10n

      - name: Build APK
        working-directory: ./apps/client
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-apk-${{ needs.determine-releases.outputs.client_version }}
          path: apps/client/build/app/outputs/flutter-apk/app-release.apk

  build-admin:
    needs: determine-releases
    if: needs.determine-releases.outputs.build_admin == 'true'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Admin
        uses: docker/build-push-action@v5
        with:
          context: ./apps/admin
          file: ./apps/admin/Dockerfile
          push: true
          target: prod
          build-args: |
            NEXT_PUBLIC_API_URL=${{ vars.ADMIN_NEXT_PUBLIC_API_URL }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${{ needs.determine-releases.outputs.admin_version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-release:
    needs: [determine-releases, build-api, build-client, build-admin]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Client APK
        if: needs.determine-releases.outputs.build_client == 'true' && needs.build-client.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: client-apk-${{ needs.determine-releases.outputs.client_version }}
          path: ./artifacts

      - name: Read existing release notes
        id: read_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ needs.determine-releases.outputs.tag_name }}"
          
          # Get existing release body (created by release-please)
          EXISTING_BODY=$(gh release view "$TAG" --json body -q .body || echo "")
          
          # Save to file for easier handling
          echo "$EXISTING_BODY" > existing_notes.md
          
          echo "📝 Existing release notes captured"

      - name: Build enhanced release notes
        id: build_notes
        run: |
          TAG="${{ needs.determine-releases.outputs.tag_name }}"
          RELEASE_TYPE="${{ needs.determine-releases.outputs.release_type }}"
          
          # Start with existing release-please generated notes
          cat existing_notes.md > enhanced_notes.md
          
          # Add deployment information section
          echo "" >> enhanced_notes.md
          echo "---" >> enhanced_notes.md
          echo "" >> enhanced_notes.md
          echo "## 🚀 Deployment Information" >> enhanced_notes.md
          echo "" >> enhanced_notes.md
          
          if [ "$RELEASE_TYPE" = "synced" ]; then
            # Synced release - all apps
            VERSION="${{ needs.determine-releases.outputs.api_version }}"
            
            echo "**All components released at version \`${VERSION}\`**" >> enhanced_notes.md
            echo "" >> enhanced_notes.md
            
            if [ "${{ needs.build-api.result }}" = "success" ]; then
              echo "### 🐳 API - Docker Image" >> enhanced_notes.md
              echo "\`\`\`bash" >> enhanced_notes.md
              echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${VERSION}" >> enhanced_notes.md
              echo "\`\`\`" >> enhanced_notes.md
              echo "" >> enhanced_notes.md
            fi
            
            if [ "${{ needs.build-client.result }}" = "success" ]; then
              echo "### 📱 Client - APK" >> enhanced_notes.md
              echo "Download the APK from the assets below." >> enhanced_notes.md
              echo "" >> enhanced_notes.md
            fi
            
            if [ "${{ needs.build-admin.result }}" = "success" ]; then
              echo "### 🐳 Admin - Docker Image" >> enhanced_notes.md
              echo "\`\`\`bash" >> enhanced_notes.md
              echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${VERSION}" >> enhanced_notes.md
              echo "\`\`\`" >> enhanced_notes.md
              echo "" >> enhanced_notes.md
            fi
            
            echo "### 📝 Changelogs" >> enhanced_notes.md
            echo "- [API Changelog](./apps/api/CHANGELOG.md)" >> enhanced_notes.md
            echo "- [Client Changelog](./apps/client/CHANGELOG.md)" >> enhanced_notes.md
            echo "- [Admin Changelog](./apps/admin/CHANGELOG.md)" >> enhanced_notes.md
            
          elif [ "$RELEASE_TYPE" = "api" ]; then
            VERSION="${{ needs.determine-releases.outputs.api_version }}"
            echo "### 🐳 API Docker Image" >> enhanced_notes.md
            echo "\`\`\`bash" >> enhanced_notes.md
            echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${VERSION}" >> enhanced_notes.md
            echo "\`\`\`" >> enhanced_notes.md
            echo "" >> enhanced_notes.md
            echo "### 📝 Changelog" >> enhanced_notes.md
            echo "See [API Changelog](./apps/api/CHANGELOG.md) for detailed changes." >> enhanced_notes.md
            
          elif [ "$RELEASE_TYPE" = "client" ]; then
            VERSION="${{ needs.determine-releases.outputs.client_version }}"
            echo "### 📱 Client APK" >> enhanced_notes.md
            echo "Download the APK from the assets below." >> enhanced_notes.md
            echo "" >> enhanced_notes.md
            echo "### 📝 Changelog" >> enhanced_notes.md
            echo "See [Client Changelog](./apps/client/CHANGELOG.md) for detailed changes." >> enhanced_notes.md
            
          elif [ "$RELEASE_TYPE" = "admin" ]; then
            VERSION="${{ needs.determine-releases.outputs.admin_version }}"
            echo "### 🐳 Admin Docker Image" >> enhanced_notes.md
            echo "\`\`\`bash" >> enhanced_notes.md
            echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${VERSION}" >> enhanced_notes.md
            echo "\`\`\`" >> enhanced_notes.md
            echo "" >> enhanced_notes.md
            echo "### 📝 Changelog" >> enhanced_notes.md
            echo "See [Admin Changelog](./apps/admin/CHANGELOG.md) for detailed changes." >> enhanced_notes.md
          fi

      - name: Update GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ needs.determine-releases.outputs.tag_name }}"
          RELEASE_TYPE="${{ needs.determine-releases.outputs.release_type }}"
          
          # Determine release title
          if [ "$RELEASE_TYPE" = "synced" ]; then
            VERSION="${{ needs.determine-releases.outputs.api_version }}"
            TITLE="Platform v${VERSION}"
          elif [ "$RELEASE_TYPE" = "api" ]; then
            VERSION="${{ needs.determine-releases.outputs.api_version }}"
            TITLE="API v${VERSION}"
          elif [ "$RELEASE_TYPE" = "client" ]; then
            VERSION="${{ needs.determine-releases.outputs.client_version }}"
            TITLE="Client v${VERSION}"
          elif [ "$RELEASE_TYPE" = "admin" ]; then
            VERSION="${{ needs.determine-releases.outputs.admin_version }}"
            TITLE="Admin v${VERSION}"
          fi
          
          # Update the release with enhanced notes and title
          gh release edit "$TAG" --title "$TITLE" --notes-file enhanced_notes.md
          
          echo "✅ Release updated: $TITLE"

      - name: Upload APK to Release
        if: needs.determine-releases.outputs.build_client == 'true' && needs.build-client.result == 'success'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ needs.determine-releases.outputs.tag_name }}"
          
          # Upload APK as release asset
          gh release upload "$TAG" ./artifacts/app-release.apk --clobber
          
          echo "✅ APK uploaded to release"
