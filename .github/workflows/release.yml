name: Production Release

on:
  push:
    branches:
      - master

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    outputs:
      has_release: ${{ steps.detect_release.outputs.should_release }}
      api_version: ${{ steps.get_versions.outputs.api }}
      client_version: ${{ steps.get_versions.outputs.client }}
      admin_version: ${{ steps.get_versions.outputs.admin }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci

      - name: Create Release Pull Request or Version Packages
        id: changesets
        uses: changesets/action@v1
        with:
          version: npm run version
          commit: "chore: version packages"
          title: "chore: version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Detect if this should trigger a release
        id: detect_release
        run: |
          # A release should trigger when:
          # 1. No changesets remain (they were just consumed)
          # 2. AND the commit history contains a recent "chore: version packages" commit
          
          HAS_CHANGESETS="${{ steps.changesets.outputs.hasChangesets }}"
          
          if [ "$HAS_CHANGESETS" = "false" ]; then
            # Check if last 2 commits include a version packages commit
            # (could be HEAD or HEAD~1 if it's a merge commit)
            RECENT_COMMITS=$(git log -2 --pretty=%B)
            
            if echo "$RECENT_COMMITS" | grep -q "chore: version packages"; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Release triggered: changesets consumed and version packages commit found"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No release: no version packages commit in recent history"
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No release: changesets still present (Version Packages PR being created/updated)"
          fi

      - name: Get current versions
        if: steps.detect_release.outputs.should_release == 'true'
        id: get_versions
        run: |
          API_VERSION=$(node -p "require('./apps/api/package.json').version")
          CLIENT_VERSION=$(node -p "require('./apps/client/package.json').version")
          ADMIN_VERSION=$(node -p "require('./apps/admin/package.json').version")

          echo "api=${API_VERSION}" >> $GITHUB_OUTPUT
          echo "client=${CLIENT_VERSION}" >> $GITHUB_OUTPUT
          echo "admin=${ADMIN_VERSION}" >> $GITHUB_OUTPUT

          echo "üöÄ Release versions:"
          echo "  API: ${API_VERSION}"
          echo "  Client: ${CLIENT_VERSION}"
          echo "  Admin: ${ADMIN_VERSION}"

  build-docker-images:
    needs: version-and-release
    if: needs.version-and-release.outputs.has_release == 'true'
    runs-on: ubuntu-latest
    environment: prod
    strategy:
      matrix:
        app: [api, admin]
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./apps/${{ matrix.app }}/package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.app }}
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          target: ${{ matrix.app == 'admin' && 'prod' || '' }}
          build-args: ${{ matrix.app == 'admin' && format('NEXT_PUBLIC_API_URL={0}', vars.ADMIN_NEXT_PUBLIC_API_URL) || '' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-${{ matrix.app }}:${{ steps.version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-${{ matrix.app }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-client:
    needs: version-and-release
    if: needs.version-and-release.outputs.has_release == 'true'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./apps/client/package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create .env file
        working-directory: ./apps/client
        run: |
          cat << EOF > .env
          API_BASE_URL=${{ vars.CLIENT_API_BASE_URL }}
          GOOGLE_CLIENT_ID=${{ vars.CLIENT_GOOGLE_CLIENT_ID }}
          APP_VERSION=${{ steps.version.outputs.version }}
          EOF
          echo "‚úÖ Created .env file for production build"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.4"
          channel: "stable"

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      - name: Setup Android Keystore
        working-directory: ./apps/client
        run: |
          echo "Setting up Android keystore for release signing..."

          # Decode keystore from base64
          echo "${{ secrets.CLIENT_KEYSTORE_BASE64 }}" | base64 -d > android/app/release-keystore.jks

          # Create key.properties file
          cat << EOF > android/key.properties
          storePassword=${{ secrets.CLIENT_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.CLIENT_KEY_PASSWORD }}
          keyAlias=${{ secrets.CLIENT_KEY_ALIAS }}
          storeFile=release-keystore.jks
          EOF

          echo "‚úÖ Keystore configured for release signing"

      - name: Install dependencies
        working-directory: ./apps/client
        run: flutter pub get

      - name: Generate localizations
        working-directory: ./apps/client
        run: flutter gen-l10n

      - name: Build APK
        working-directory: ./apps/client
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-apk-${{ steps.version.outputs.version }}
          path: apps/client/build/app/outputs/flutter-apk/app-release.apk

  create-releases:
    needs: [version-and-release, build-docker-images, build-client]
    if: needs.version-and-release.outputs.has_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Determine release strategy
        id: strategy
        run: |
          API_VERSION="${{ needs.version-and-release.outputs.api_version }}"
          CLIENT_VERSION="${{ needs.version-and-release.outputs.client_version }}"
          ADMIN_VERSION="${{ needs.version-and-release.outputs.admin_version }}"

          echo "api=${API_VERSION}" >> $GITHUB_OUTPUT
          echo "client=${CLIENT_VERSION}" >> $GITHUB_OUTPUT
          echo "admin=${ADMIN_VERSION}" >> $GITHUB_OUTPUT

          # Check if all versions are the same (synchronized release)
          if [ "$API_VERSION" = "$CLIENT_VERSION" ] && [ "$API_VERSION" = "$ADMIN_VERSION" ]; then
            echo "synchronized=true" >> $GITHUB_OUTPUT
            echo "Synchronized release detected: v${API_VERSION}"
          else
            echo "synchronized=false" >> $GITHUB_OUTPUT
            echo "Independent patch releases detected"
            
            # For independent releases, mark all as changed (simpler approach)
            echo "api_changed=true" >> $GITHUB_OUTPUT
            echo "client_changed=true" >> $GITHUB_OUTPUT
            echo "admin_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Download Client APK
        uses: actions/download-artifact@v4
        with:
          name: client-apk-${{ steps.strategy.outputs.client }}
          path: ./artifacts

      # Synchronized release (all apps same version)
      - name: Create combined release
        if: steps.strategy.outputs.synchronized == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.strategy.outputs.api }}
          name: Release v${{ steps.strategy.outputs.api }}
          body: |
            ## üì¶ Component Versions
            - **API:** v${{ steps.strategy.outputs.api }}
            - **Client:** v${{ steps.strategy.outputs.client }}
            - **Admin:** v${{ steps.strategy.outputs.admin }}

            ## üê≥ Docker Images
            - `${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${{ steps.strategy.outputs.api }}`
            - `${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${{ steps.strategy.outputs.admin }}`

            ## üì± Client APK
            - Flutter APK attached to this release

            ## üìù Changelog
            See individual CHANGELOG.md files in each app directory for detailed changes:
            - [API Changelog](./apps/api/CHANGELOG.md)
            - [Client Changelog](./apps/client/CHANGELOG.md)
            - [Admin Changelog](./apps/admin/CHANGELOG.md)
          files: ./artifacts/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Independent patch releases (only for changed apps)
      - name: Create API release
        if: steps.strategy.outputs.synchronized == 'false' && steps.strategy.outputs.api_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: api-v${{ steps.strategy.outputs.api }}
          name: API v${{ steps.strategy.outputs.api }}
          body: |
            ## üîß Patch Release: API

            **Version:** v${{ steps.strategy.outputs.api }}

            ## üê≥ Docker Image
            - `${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${{ steps.strategy.outputs.api }}`

            ## üìù Changelog
            See [API Changelog](./apps/api/CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Client release
        if: steps.strategy.outputs.synchronized == 'false' && steps.strategy.outputs.client_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: client-v${{ steps.strategy.outputs.client }}
          name: Client v${{ steps.strategy.outputs.client }}
          body: |
            ## üîß Patch Release: Client

            **Version:** v${{ steps.strategy.outputs.client }}

            ## üì± APK
            - Flutter APK attached to this release

            ## üìù Changelog
            See [Client Changelog](./apps/client/CHANGELOG.md) for detailed changes.
          files: ./artifacts/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Admin release
        if: steps.strategy.outputs.synchronized == 'false' && steps.strategy.outputs.admin_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: admin-v${{ steps.strategy.outputs.admin }}
          name: Admin v${{ steps.strategy.outputs.admin }}
          body: |
            ## üîß Patch Release: Admin

            **Version:** v${{ steps.strategy.outputs.admin }}

            ## üê≥ Docker Image
            - `${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${{ steps.strategy.outputs.admin }}`

            ## üìù Changelog
            See [Admin Changelog](./apps/admin/CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
