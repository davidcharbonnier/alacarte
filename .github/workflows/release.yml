name: Production Release

on:
  push:
    branches:
      - master

jobs:
  detect-release:
    # Only run if IS a release commit
    if: startsWith(github.event.head_commit.message, 'chore: release')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.detect.outputs.version }}
      api_changed: ${{ steps.detect.outputs.api_changed }}
      client_changed: ${{ steps.detect.outputs.client_changed }}
      admin_changed: ${{ steps.detect.outputs.admin_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Extract version and detect changes
        id: detect
        run: |
          # Extract version from package.json (all apps have same version)
          VERSION=$(node -p "require('./apps/api/package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Version: v${VERSION}"
          
          # Detect which apps had CHANGELOG updates (indicates actual code changes)
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
          
          if echo "$CHANGED_FILES" | grep -q "apps/api/CHANGELOG.md"; then
            echo "api_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ API changed"
          else
            echo "api_changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è API unchanged"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "apps/client/CHANGELOG.md"; then
            echo "client_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Client changed"
          else
            echo "client_changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Client unchanged"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "apps/admin/CHANGELOG.md"; then
            echo "admin_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Admin changed"
          else
            echo "admin_changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Admin unchanged"
          fi

  build-api:
    needs: detect-release
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${{ needs.detect-release.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-client:
    needs: detect-release
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env file
        working-directory: ./apps/client
        run: |
          cat << EOF > .env
          API_BASE_URL=${{ vars.CLIENT_API_BASE_URL }}
          GOOGLE_CLIENT_ID=${{ vars.CLIENT_GOOGLE_CLIENT_ID }}
          APP_VERSION=${{ needs.detect-release.outputs.version }}
          EOF
          echo "‚úÖ Created .env file for production build"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.4"
          channel: "stable"

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      - name: Setup Android Keystore
        working-directory: ./apps/client
        run: |
          echo "Setting up Android keystore for release signing..."

          # Decode keystore from base64
          echo "${{ secrets.CLIENT_KEYSTORE_BASE64 }}" | base64 -d > android/app/release-keystore.jks

          # Create key.properties file
          cat << EOF > android/key.properties
          storePassword=${{ secrets.CLIENT_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.CLIENT_KEY_PASSWORD }}
          keyAlias=${{ secrets.CLIENT_KEY_ALIAS }}
          storeFile=release-keystore.jks
          EOF

          echo "‚úÖ Keystore configured for release signing"

      - name: Install dependencies
        working-directory: ./apps/client
        run: flutter pub get

      - name: Generate localizations
        working-directory: ./apps/client
        run: flutter gen-l10n

      - name: Build APK
        working-directory: ./apps/client
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-apk-${{ needs.detect-release.outputs.version }}
          path: apps/client/build/app/outputs/flutter-apk/app-release.apk

  build-admin:
    needs: detect-release
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Admin
        uses: docker/build-push-action@v5
        with:
          context: ./apps/admin
          file: ./apps/admin/Dockerfile
          push: true
          target: prod
          build-args: |
            NEXT_PUBLIC_API_URL=${{ vars.ADMIN_NEXT_PUBLIC_API_URL }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${{ needs.detect-release.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [detect-release, build-api, build-client, build-admin]
    if: |
      always() &&
      needs.build-api.result == 'success' &&
      needs.build-client.result == 'success' &&
      needs.build-admin.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Client APK
        uses: actions/download-artifact@v4
        with:
          name: client-apk-${{ needs.detect-release.outputs.version }}
          path: ./artifacts

      - name: Build components list
        id: components
        run: |
          COMPONENTS=""
          
          if [ "${{ needs.detect-release.outputs.api_changed }}" = "true" ]; then
            COMPONENTS="${COMPONENTS}API, "
          fi
          
          if [ "${{ needs.detect-release.outputs.client_changed }}" = "true" ]; then
            COMPONENTS="${COMPONENTS}Client, "
          fi
          
          if [ "${{ needs.detect-release.outputs.admin_changed }}" = "true" ]; then
            COMPONENTS="${COMPONENTS}Admin, "
          fi
          
          # Remove trailing comma and space
          COMPONENTS=$(echo "$COMPONENTS" | sed 's/, $//')
          
          # If no components changed (shouldn't happen, but safety check)
          if [ -z "$COMPONENTS" ]; then
            COMPONENTS="All components"
          fi
          
          echo "components=${COMPONENTS}" >> $GITHUB_OUTPUT
          echo "üìã Components updated: ${COMPONENTS}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.detect-release.outputs.version }}
          name: Release v${{ needs.detect-release.outputs.version }}
          body: |
            ## üì¶ Release v${{ needs.detect-release.outputs.version }}
            
            **Components updated:** ${{ steps.components.outputs.components }}
            
            All components synchronized to version ${{ needs.detect-release.outputs.version }}.
            
            ## üê≥ Docker Images
            - `${{ secrets.DOCKERHUB_USERNAME }}/alacarte-api:${{ needs.detect-release.outputs.version }}`
            - `${{ secrets.DOCKERHUB_USERNAME }}/alacarte-admin:${{ needs.detect-release.outputs.version }}`
            
            ## üì± Client APK
            - Flutter APK attached to this release
            
            ## üìù Changelog
            See individual CHANGELOG.md files for detailed changes:
            - [API Changelog](./apps/api/CHANGELOG.md)
            - [Client Changelog](./apps/client/CHANGELOG.md)
            - [Admin Changelog](./apps/admin/CHANGELOG.md)
          files: ./artifacts/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
